#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <stdint.h>
#include <string.h>

#define PAGE_SIZE 4096  // 4KB page size

// 读取一个虚拟地址对应的物理地址信息
void print_pagemap_info(pid_t pid, unsigned long vaddr) {
    char pagemap_file[256];
    sprintf(pagemap_file, "/proc/%d/pagemap", pid);

    // 打开pagemap文件
    int fd = open(pagemap_file, O_RDONLY);
    if (fd == -1) {
        perror("Failed to open pagemap");
        return;
    }

    // 计算页表的索引
    unsigned long page_offset = vaddr / PAGE_SIZE;
    off_t offset = page_offset * sizeof(uint64_t);

    // 定位到页表项
    if (lseek(fd, offset, SEEK_SET) == -1) {
        perror("Failed to seek pagemap");
        close(fd);
        return;
    }

    uint64_t entry;
    ssize_t n = read(fd, &entry, sizeof(entry));
    if (n != sizeof(entry)) {
        perror("Failed to read pagemap entry");
        close(fd);
        return;
    }

    // 解析页表项
    unsigned long frame = entry & ((1ULL << 54) - 1); // 获取物理帧号
    int present = (entry >> 63) & 1; // 页是否存在

    if (present) {
        printf("Virtual address 0x%lx maps to physical frame 0x%lx\n", vaddr, frame * PAGE_SIZE);
    } else {
        printf("Virtual address 0x%lx is not present in memory.\n", vaddr);
    }

    close(fd);
}

int main() {
    pid_t pid = getpid(); // 获取当前进程ID
    unsigned long vaddr = (unsigned long)mmap(NULL, PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);

    if ((void *)vaddr == MAP_FAILED) {
        perror("mmap failed");
        return 1;
    }

    printf("Testing with a new virtual address: 0x%lx\n", vaddr);

    // 打印虚拟地址到物理地址的映射
    print_pagemap_info(pid, vaddr);

    // 清理
    if (munmap((void *)vaddr, PAGE_SIZE) == -1) {
        perror("munmap failed");
        return 1;
    }

    return 0;
}
